{{#partial "content"}}
    <div class="row">
        <div class="col-md-4 col-sm-12">
            <div class="row">
                <div class="col"><h3>Topology Specification</h3></div>
            </div>
            <div class="row">
                <div class="col">
                    <pre id="topologySpecJSON" class="code-display">{{{detailsJSON}}}</pre>
                </div>
            </div>
        </div>
        <div class="col-md-8 col-sm-12">
            <div class="row">
                <div class="col-sm-10">
                    <h3>Runs</h3>
                </div>
                <div class="col-sm-2">
                    <div class="btn-group float-right" role="group" >
                        <button class="btn btn-primary" id="reload-runs"
                                data-toggle="tooltip" data-placement="top" title="Refresh runs">
                            <i class="fa-solid fa-rotate" aria-hidden="true"></i>
                        </button>
                        {{#eqstr userRole "READ_WRITE"}}
                            <button class="btn btn-primary" id="instant-run"
                                    data-toggle="tooltip" data-placement="top" title="Run topology instantly">
                                <i class="fa-solid fa-forward" aria-hidden="true"></i>
                            </button>
                            {{#with details}}
                                {{#eqstr state "ACTIVE"}}
                                    <button class="btn btn-warning" id="pause"
                                            data-toggle="tooltip" data-placement="top" title="Pause topology">
                                        <i class="fa-solid fa-pause" aria-hidden="true"></i>
                                    </button>
                                {{else}}
                                    <button class="btn btn-success" id="unpause"
                                            data-toggle="tooltip" data-placement="top" title="Reactivate topology">
                                        <i class="fa-solid fa-play" aria-hidden="true"></i>
                                    </button>
                                {{/eqstr}}
                            {{/with}}
                            <button class="btn btn-primary" id="edit"
                                    data-toggle="tooltip" data-placement="top" title="Edit topology">
                                <i class="fa-regular fa-edit" aria-hidden="true"></i>
                            </button>
                            <button class="btn btn-danger" id="delete"
                                    data-toggle="tooltip" data-placement="top" title="Delete topology permanently">
                                <i class="fa-regular fa-trash-can" aria-hidden="true"></i>
                            </button>
                        {{/eqstr}}
                    </div>
                </div>
                <div class="modal fade" id="editTopology" tabindex="-1" role="dialog" aria-labelledby="editTopologyTitle" aria-hidden="true">
                    <div class="modal-dialog modal-lg" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="editTopologyTitle">Edit Topology: {{details.id}}</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col">
                                        <section>
                                            <div class="row">
                                                <div class="col">
                                                    <form class="mt-2" id="edit-topology-form">
                                                        <div class="form-group row">
                                                            <label for="name" class="col-sm-2 col-form-label">Name</label>
                                                            <div class="col-sm-10">
                                                                <input type="text" class="form-control" id="name" name="name" value="{{details.topology.name}}" readonly>
                                                            </div>
                                                        </div>
                                                        <div class="form-group row">
                                                            <label for="cron" class="col-sm-2 col-form-label">Cron Pattern</label>
                                                            <div class="col-sm-10">
                                                                <input type="text" class="form-control" id="cron" name="cron" value="{{details.topology.trigger.timeSpec}}">
                                                            </div>
                                                        </div>
                                                        <div class="task-row card m-2">
                                                            <div class="card-header">Task</div>
                                                            <div class="card-body text-primary">
                                                                <div class="row">
                                                                    <div class="col">
                                                                        <div class="form-group row">
                                                                            <label for="docker" class="col-md-4 col-form-label">Docker Container</label>
                                                                            <div class="col-md-8">
                                                                                <input type="text" class="form-control" id="docker" name="docker" placeholder="Docker Container tag (URL)" value="{{details.topology.task.executable.url}}"
                                                                                       pattern="^(?:(?=[^:\/]{4,253})(?!-)[a-zA-Z0-9-]{1,63}(?<!-)(?:\.(?!-)[a-zA-Z0-9-]{1,63}(?<!-))*(?::[0-9]{1,5})?/)?((?![._-])(?:[a-z0-9._-]*)(?<![._-])(?:/(?![._-])[a-z0-9._-]*(?<![._-]))*)(?::(?![.-])[a-zA-Z0-9_.-]{1,128})?$" required>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group row">
                                                                            <label for="cpus" class="col-md-4 col-form-label">Number of CPUs</label>
                                                                            <div class="col-md-6">
                                                                                <input type="range" class="form-control" id="cpus" name="cpus"
                                                                                       value="{{getresource "CPU" details.topology.task}}" min="1" max="40"
                                                                                       oninput="document.getElementById('cpu-value').textContent = this.value" required>
                                                                            </div>
                                                                            <div class="col-sm-2">
                                                                                <small id="cpu-value">{{getresource "CPU" details.topology.task}}</small>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group row">
                                                                            <label for="memory" class="col-md-4 col-form-label">Memory (MB)</label>
                                                                            <div class="col-md-6">
                                                                                <input type="range" class="form-control" id="memory" name="memory" step="128"
                                                                                       value="{{getresource "MEMORY" details.topology.task}}" min="128" max="100000"
                                                                                       oninput="document.getElementById('memory-value').textContent = formatBytes(parseInt(this.value))" required>
                                                                            </div>
                                                                            <div class="col-sm-2">
                                                                                <small id="memory-value">{{getresource "MEMORY" details.topology.task}}</small>
                                                                            </div>
                                                                        </div>

                                                                        <div class="row p-2">
                                                                            <div class="col">
                                                                                <div class="row mb-1">
                                                                                    <div class="col-sm-10">
                                                                                        <h5>Environment Variables</h5>
                                                                                    </div>
                                                                                    <div class="col-sm-2">
                                                                                        <button type="button" class="btn btn-success px-3 env-add">
                                                                                            <i class="fa-regular fa-plus" aria-hidden="true"></i>
                                                                                        </button>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="row">
                                                                                    <div class="col env-vars">
                                                                                        <div class="form-group row env-row-prototype close-row d-none" id="envRowPrototype">
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" class="form-control env-name" name="env-name" placeholder="Variable Name" required>
                                                                                            </div>
                                                                                            <div class="col-sm-6">
                                                                                                <input type="text" class="form-control env-val" name="env-val" placeholder="Variable Value" required>
                                                                                            </div>
                                                                                            <div class="col-sm-2">
                                                                                                <button type="button" class="btn btn-outline-danger px-3 env-delete">
                                                                                                    <i class="fa-regular fa-trash-can" aria-hidden="true"></i>
                                                                                                </button>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        <div class="row p-2">
                                                                            <div class="col">
                                                                                <div class="row mb-1">
                                                                                    <div class="col-sm-10">
                                                                                        <h5>Volumes</h5>
                                                                                    </div>
                                                                                    <div class="col-sm-2">
                                                                                        <button type="button" class="btn btn-success px-3 vol-add">
                                                                                            <i class="fa-regular fa-plus" aria-hidden="true"></i>
                                                                                        </button>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="row">
                                                                                    <div class="col volumes">
                                                                                        <div class="form-group row vol-row-prototype close-row d-none" id="volRowPrototype">
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" class="form-control vol-host-path" name="host-path" placeholder="Host directory" required>
                                                                                            </div>
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" class="form-control vol-cont-path" name="cont-path" placeholder="Mount path inside container" required>
                                                                                            </div>
                                                                                            <div class="col-sm-2">
                                                                                                <select class="form-control vol-mode" name="mount-mode">
                                                                                                    <option value="READ_ONLY">RO</option>
                                                                                                    <option value="READ_WRITE">RW</option>
                                                                                                </select>
                                                                                            </div>
                                                                                            <div class="col-sm-2">
                                                                                                <button type="button" class="btn btn-outline-danger px-3 vol-delete">
                                                                                                    <i class="fa-regular fa-trash-can" aria-hidden="true"></i>
                                                                                                </button>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group row">
                                                                            <label for="notifyEmail" class="col-md-4 col-form-label">Notification Email</label>
                                                                            <div class="col-md-8">
                                                                                <input type="text" class="form-control" id="notifyEmail" name="notifyEmail"
                                                                                       value="{{join "," details.topology.notify.emails}}"
                                                                                       placeholder="Email IDs to notify on success and failure (comma separated)" required>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </form>
                                                </div>
                                            </div>
                                        </section>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" id="submitEditTopology">Save changes</button>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="row">
                <div class="col">
                    <table class="table table-bordered" title="runs" id="runs">
                        <thead>
                        <tr>
                            <th></th>
                            <th>Run ID</th>
                            <th>Type</th>
                            <th>State</th>
                            <th>Error Message</th>
                            <th>Started</th>
                            <th>Elapsed Time</th>
                        </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>

    </div>
{{/partial}}

{{#partial "page_js_includes"}}
        <script src="/js/jquery.validate.min.js"></script>
{{/partial}}


{{#partial "page_js"}}
    function formatTasks(row) {
        var str = `<table class="table table-bordered">
            <thead>
            <tr>
                <th>Task Name</th>
                <th>State</th>
                <th>Task Id</th>
                <td>Error Message</td>
                <th>Logs</th>
                <th></th>
            </tr>
            </thead>
            <tbody>`;
        for(const [id, task] of Object.entries(row.tasks)) {
            str += '<tr>';
            str += '<td>' + id + '</td>';
            str += '<td>' + renderTaskRunState(task.state) + '</td>';
            str += '<td>' + task.taskId + '</td>';
            str += '<td>' + (task.errorMessage ? task.errorMessage : '') + '</td>';
            str += '<td><a class="log-link" data-topology-id="' + row.topologyId + '" data-run-id="' + row.runId + '" data-task-id="' + id + '">View Log</a></td>';
            if(task.state === 'RUNNING') {
                str += '<td><button class="btn btn-sm btn-danger cancel-task" data-topology-id="' + row.topologyId + '" data-run-id="' + row.runId + '" data-task-id="' + id + '">Cancel</button> </td>';
            }
            else {
                str += '<td></td>';
            }
            str += '</tr>';
        }
        str += `
            </tbody>
        </table>`;
        return (str);
    }

    $(document).on('click', 'a.log-link',
        e => {
            const link = $(e.target);
            const tId = link.attr('data-topology-id');
            const rId = link.attr('data-run-id');
            const tsId = link.attr('data-task-id');
            $.get('/apis/v1/topologies/' + tId + '/runs/' + rId + '/tasks/' + tsId + '/log',
                res => {
                    if(res.data) {
                        window.open(res.data, '_blank', 'noopener,noreferrer');
                    }
                }
            );
        }
    );
    $(document).on('click', 'button.cancel-task',
        e => {
            const link = $(e.target);
            const tId = link.attr('data-topology-id');
            const rId = link.attr('data-run-id');
            const tsId = link.attr('data-task-id');
            $.post('/apis/v1/topologies/' + tId + '/runs/' + rId + '/tasks/' + tsId + '/kill',
                res => {
                    if(res.status === 'SUCCESS') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Task cancellation requested'
                        })
                        .then(() => runs.ajax.reload(null, false));
                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Task cancellation failed',
                            text: 'Reason: ' + res.message
                        })
                        .then(() => runs.ajax.reload(null, false));
                    }
                }
            );
        }
    );
    var runs = $('#runs').DataTable({
    'processing' : true,
    'paging' : true,
    'ajax': {
            'url' : '/apis/v1/topologies/{{#with details}}{{id}}{{/with}}/runs',
            'dataSrc': function(res) { return res.data ? res.data : [];
        }
    },
    'paging': false,
    'searching' : false,
    'ordering' : false,
    'info' : false,
    'columnDefs': [ {'className': 'text-center', 'targets': '_all'} ],
    'columns' : [
        {
            'className': 'dt-control',
            'orderable': false,
            'data': null,
            'defaultContent': '',
        },
        { 'data' : 'runId' },
        { 'data' : 'runType', 'render': renderTopologyRunType },
        { 'data' : 'state', 'render' : renderTopologyRunState },
        { 'data' : 'message' },
        { 'data' : 'created', 'render' : localDate },
        { 'data' : 'created', 'render' : lifetime }
    ]
    });

    function confirmAndRun(title, question, verb, api, handler) {
        Swal.fire({
            title: title,
            text: question,
            type: "warning",
            showCancelButton: true,
            focusConfirm: false,
            confirmButtonColor: "#00c559",
            confirmButtonText: "Confirm",
            cancelButtonText: "Cancel"
        }).then(function (result) {
            if (result.value) {
                $.ajax({
                    type: verb,
                    url: api,
                    success: handler ? handler : setTimeout(() => runs.ajax.reload(null, false), 5000)
                });
            }
        });
    }

    $('#runs tbody').on('click', 'td.dt-control', function () {
        var tr = $(this).closest('tr');
        var row = runs.row(tr);

        if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
        }
        else {
            // Open this row
            row.child(formatTasks(row.data())).show();
            tr.addClass('shown');
        }
    });
    $('#reload-runs').on('click', () => runs.ajax.reload(null, false));
    $('#instant-run').on('click', () => confirmAndRun(
                                            "Instant Run Topology",
                                            "Are you sure you want to run this topology right now?",
                                            "PUT",
                                            "/apis/v1/topologies/{{topologyId}}/run"));
    $('#pause').on('click', () => confirmAndRun(
                                            "Pause Topology",
                                            "Are you sure you want to pause this topology?",
                                            "PUT",
                                            "/apis/v1/topologies/{{topologyId}}/pause",
                                            () => location.reload()));
    $('#unpause').on('click', () => confirmAndRun(
                                            "Reactivate Topology",
                                            "Are you sure you want to reactivate this topology?",
                                            "PUT",
                                            "/apis/v1/topologies/{{topologyId}}/unpause",
                                            () => location.reload()));

    $(document).ready(function() {
        var originalEnvRowCopy = $(".env-row-prototype").clone();
        var originalVolRowCopy = $(".vol-row-prototype").clone();

        $(document).on('click', '.env-add', e => {
            var newRow = originalEnvRowCopy.clone().removeClass("d-none env-row-prototype");
            $(".env-vars").append(newRow);
        });

        $(document).on('click', '.env-delete', e => {
            $(e.currentTarget).parents("#envRowPrototype").remove();
        });

        $(document).on('click', '.vol-add', e => {
            var newRow = originalVolRowCopy.clone().removeClass("d-none vol-row-prototype");
            $(".volumes").append(newRow);
        });

        $(document).on('click', '.vol-delete', e => {
            $(e.currentTarget).parents("#volRowPrototype").remove();
        });

        $('#edit').on('click', function() {
            $(".env-vars").empty();
            $(".volumes").empty();
            {{#each details.topology.task.env}}
                var row = originalEnvRowCopy.clone().removeClass("d-none env-row-prototype");
                row.find(".env-name").val("{{@key}}");
                row.find(".env-val").val("{{this}}");
                $(".env-vars").append(row);
            {{/each}}

            {{#each details.topology.task.volumes}}
                console.log("path =" + "{{this.pathInContainer}}");
                var row = originalVolRowCopy.clone().removeClass("d-none vol-row-prototype");
                row.find(".vol-host-path").val("{{this.pathOnHost}}");
                row.find(".vol-cont-path").val("{{this.pathInContainer}}");
                row.find(".vol-mode").val("{{this.mode}}");
                $(".volumes").append(row);
            {{/each}}

            $('#editTopology').modal('show');
        });
    });

    $('#submitEditTopology').on('click', function(e) {
        e.preventDefault();
        if($('#edit-topology-form').valid()) {
            updateTopology();
        }
    });

    $('#editTopology').on('hidden.bs.modal', function() {
        console.log("we be resetting");
        $("#edit-topology-form")[0].reset();

        // Reset the display for the memory slider
        var memoryValue = $("#memory").val();
        $("#memory-value").text(formatBytes(parseInt(memoryValue)));

        // Reset the display for the cpu slider
        var cpuValue = $("#cpus").val();
        $("#cpu-value").text(cpuValue);
    });

    function updateTopology() {
        console.log('update topology');
        const form = document.getElementById('edit-topology-form');
        const inputs = new FormData(form);
        var tdef = {};
        tdef['cron'] = inputs.get('cron');
        tdef['docker'] = inputs.get('docker');
        tdef['cpus'] = parseInt(inputs.get('cpus'));
        tdef['memory'] = parseInt(inputs.get('memory'));
        tdef['notifyEmail'] = inputs.get('notifyEmail');
        const envNames = inputs.getAll('env-name');
        const envValues = inputs.getAll('env-val');
        var env = {};
        for(i = 0; i < envNames.length; i++) {
            env[envNames[i]] = envValues[i];
        }
        tdef['env'] = env;
        var volumes = [];
        const hostPaths = inputs.getAll('host-path');
        const contPaths = inputs.getAll('cont-path');
        const mModes = inputs.getAll('mount-mode');
        for(i = 0; i < hostPaths.length; i++) {
            var volDef = {};
            volDef['pathOnHost'] = hostPaths[i];
            volDef['pathInContainer'] = contPaths[i] ? contPaths[i] : hostPaths[i];
            volDef['mode'] = mModes[i];
            volumes.push(volDef);
        }
        tdef['volumes'] = volumes;
        console.log(JSON.stringify(tdef));
        $.ajax({
            type: 'put',
            url: '/apis/v1/topologies/' + inputs.get('name'),
            data: JSON.stringify(tdef),
            contentType: "application/json; charset=utf-8",
            traditional: true,
            success: function (data) {
                alert("Topology updated successfully.");
                $('#editTopology').modal('hide');
                location.reload();
            }
        });
    }

    $('#delete').on('click', () => confirmAndRun(
                                            "Delete Topology",
                                            "Are you sure you want to delete this topology? You will not be able to undo this.",
                                            "DELETE",
                                            "/apis/v1/topologies/{{topologyId}}",
                                            () => window.location = "/"));
{{/partial}}

{{> common/base}}