{{#partial "content"}}
    <div class="row">
        <div class="col-md-4 col-sm-12">
            <div class="row">
                <div class="col"><h3>Topology Specification</h3></div>
            </div>
            <div class="row">
                <div class="col">
                    <pre id="topologySpecJSON" class="code-display">{{{detailsJSON}}}</pre>
                </div>
            </div>
        </div>
        <div class="col-md-8 col-sm-12">
            <div class="row">
                <div class="col-sm-10">
                    <h3>Runs</h3>
                </div>
                <div class="col-sm-2">
                    <div class="btn-group float-right" role="group" >
                        <button class="btn btn-primary" id="reload-runs"
                                data-toggle="tooltip" data-placement="top" title="Refresh runs">
                            <i class="fa-solid fa-rotate" aria-hidden="true"></i>
                        </button>
                        {{#eqstr userRole "READ_WRITE"}}
                            <button class="btn btn-primary" id="instant-run"
                                    data-toggle="tooltip" data-placement="top" title="Run topology instantly">
                                <i class="fa-solid fa-forward" aria-hidden="true"></i>
                            </button>
                            {{#with details}}
                                {{#eqstr state "ACTIVE"}}
                                    <button class="btn btn-warning" id="pause"
                                            data-toggle="tooltip" data-placement="top" title="Pause topology">
                                        <i class="fa-solid fa-pause" aria-hidden="true"></i>
                                    </button>
                                {{else}}
                                    <button class="btn btn-success" id="unpause"
                                            data-toggle="tooltip" data-placement="top" title="Reactivate topology">
                                        <i class="fa-solid fa-play" aria-hidden="true"></i>
                                    </button>
                                {{/eqstr}}
                            {{/with}}
                            <button class="btn btn-primary" id="edit"
                                    data-toggle="tooltip" data-placement="top" title="Edit topology">
                                <i class="fa-regular fa-edit" aria-hidden="true"></i>
                            </button>
                            <button class="btn btn-danger" id="delete"
                                    data-toggle="tooltip" data-placement="top" title="Delete topology permanently">
                                <i class="fa-regular fa-trash-can" aria-hidden="true"></i>
                            </button>
                        {{/eqstr}}
                    </div>
                </div>
                {{> common/updatemodal}}
            </div>
            <div class="row">
                <div class="col">
                    <table class="table table-bordered" title="runs" id="runs">
                        <thead>
                        <tr>
                            <th></th>
                            <th>Run ID</th>
                            <th>Type</th>
                            <th>State</th>
                            <th>Error Message</th>
                            <th>Started</th>
                            <th>Elapsed Time</th>
                        </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>

    </div>
{{/partial}}

{{#partial "page_js_includes"}}
        <script src="/js/jquery.validate.min.js"></script>
{{/partial}}


{{#partial "page_js"}}
    function formatTasks(row) {
        var str = `<table class="table table-bordered">
            <thead>
            <tr>
                <th>Task Name</th>
                <th>State</th>
                <th>Task Id</th>
                <td>Error Message</td>
                <th>Logs</th>
                <th></th>
            </tr>
            </thead>
            <tbody>`;
        for(const [id, task] of Object.entries(row.tasks)) {
            str += '<tr>';
            str += '<td>' + id + '</td>';
            str += '<td>' + renderTaskRunState(task.state) + '</td>';
            str += '<td>' + task.taskId + '</td>';
            str += '<td>' + (task.errorMessage ? task.errorMessage : '') + '</td>';
            str += '<td><a class="log-link" data-topology-id="' + row.topologyId + '" data-run-id="' + row.runId + '" data-task-id="' + id + '">View Log</a></td>';
            if(task.state === 'RUNNING') {
                str += '<td><button class="btn btn-sm btn-danger cancel-task" data-topology-id="' + row.topologyId + '" data-run-id="' + row.runId + '" data-task-id="' + id + '">Cancel</button> </td>';
            }
            else {
                str += '<td></td>';
            }
            str += '</tr>';
        }
        str += `
            </tbody>
        </table>`;
        return (str);
    }

    $(document).on('click', 'a.log-link',
        e => {
            const link = $(e.target);
            const tId = link.attr('data-topology-id');
            const rId = link.attr('data-run-id');
            const tsId = link.attr('data-task-id');
            $.get('/apis/v1/topologies/' + tId + '/runs/' + rId + '/tasks/' + tsId + '/log',
                res => {
                    if(res.data) {
                        window.open(res.data, '_blank', 'noopener,noreferrer');
                    }
                }
            );
        }
    );
    $(document).on('click', 'button.cancel-task',
        e => {
            const link = $(e.target);
            const tId = link.attr('data-topology-id');
            const rId = link.attr('data-run-id');
            const tsId = link.attr('data-task-id');
            $.post('/apis/v1/topologies/' + tId + '/runs/' + rId + '/tasks/' + tsId + '/kill',
                res => {
                    if(res.status === 'SUCCESS') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Task cancellation requested'
                        })
                        .then(() => runs.ajax.reload(null, false));
                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Task cancellation failed',
                            text: 'Reason: ' + res.message
                        })
                        .then(() => runs.ajax.reload(null, false));
                    }
                }
            );
        }
    );
    var runs = $('#runs').DataTable({
    'processing' : true,
    'paging' : true,
    'ajax': {
            'url' : '/apis/v1/topologies/{{#with details}}{{id}}{{/with}}/runs',
            'dataSrc': function(res) { return res.data ? res.data : [];
        }
    },
    'paging': false,
    'searching' : false,
    'ordering' : false,
    'info' : false,
    'columnDefs': [ {'className': 'text-center', 'targets': '_all'} ],
    'columns' : [
        {
            'className': 'dt-control',
            'orderable': false,
            'data': null,
            'defaultContent': '',
        },
        { 'data' : 'runId' },
        { 'data' : 'runType', 'render': renderTopologyRunType },
        { 'data' : 'state', 'render' : renderTopologyRunState },
        { 'data' : 'message' },
        { 'data' : 'created', 'render' : localDate },
        { 'data' : 'created', 'render' : lifetime }
    ]
    });

    function confirmAndRun(title, question, verb, api, handler) {
        Swal.fire({
            title: title,
            text: question,
            icon: "warning",
            showCancelButton: true,
            focusConfirm: false,
            confirmButtonColor: "#00c559",
            confirmButtonText: "Confirm",
            cancelButtonText: "Cancel"
        }).then(function (result) {
            if (result.value) {
                $.ajax({
                    type: verb,
                    url: api,
                    success: handler ? handler : setTimeout(() => runs.ajax.reload(null, false), 5000)
                });
            }
        });
    }

    $('#runs tbody').on('click', 'td.dt-control', function () {
        var tr = $(this).closest('tr');
        var row = runs.row(tr);

        if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
        }
        else {
            // Open this row
            row.child(formatTasks(row.data())).show();
            tr.addClass('shown');
        }
    });
    $('#reload-runs').on('click', () => runs.ajax.reload(null, false));
    $('#instant-run').on('click', () => confirmAndRun(
                                            "Instant Run Topology",
                                            "Are you sure you want to run this topology right now?",
                                            "PUT",
                                            "/apis/v1/topologies/{{topologyId}}/run"));
    $('#pause').on('click', () => confirmAndRun(
                                            "Pause Topology",
                                            "Are you sure you want to pause this topology?",
                                            "PUT",
                                            "/apis/v1/topologies/{{topologyId}}/pause",
                                            () => location.reload()));
    $('#unpause').on('click', () => confirmAndRun(
                                            "Reactivate Topology",
                                            "Are you sure you want to reactivate this topology?",
                                            "PUT",
                                            "/apis/v1/topologies/{{topologyId}}/unpause",
                                            () => location.reload()));
    $('#delete').on('click', () => confirmAndRun(
                                            "Delete Topology",
                                            "Are you sure you want to delete this topology? You will not be able to undo this.",
                                            "DELETE",
                                            "/apis/v1/topologies/{{topologyId}}",
                                            () => {
                                                return Swal.fire({
                                                    icon: 'success',
                                                    title: 'Deleted successfully'
                                                }).then(result => window.location = "/");
                                            }));
    {{#block "update_modal_js"}}{{/block}}

{{/partial}}

{{> common/base}}